# Copyright (c) 2020-2021 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Builds

on:
    push:
    pull_request:
    workflow_dispatch:

concurrency:
    group: ${{ github.ref }}-${{ github.workflow }}-${{ (github.event_name == 'pull_request' && github.event.number) || (github.event_name == 'workflow_dispatch' && github.run_number) || github.sha }}
    cancel-in-progress: true

jobs:

    build_darwin:
        name: Build on Darwin (clang, python_lib, simulated)
        timeout-minutes: 200
        runs-on: macos-12
        if: github.actor != 'restyled-io[bot]'

        steps:
            - uses: Wandalen/wretry.action@v1.0.15
              name: Checkout
              with:
                  action: actions/checkout@v3
                  with: |
                      token: ${{ github.token }}
                  attempt_limit: 3
                  attempt_delay: 2000
            - name: env-0
              run: |
                  echo $(env -0)
                  env -0
            - name: Test
              run: |
                  echo "pwd: $PWD"
                  echo "pwd2: $(pwd)"
                  echo "env:  $(env)"
                  echo "$(/bin/bash env -h)"
            - name: python3
              run: |
                  python3 -c "import os; print(os.environ)"
            - name: python2
              run: |
                  python -c "import os; print os.environ"
            # - name: Setup Environment
            #   run: brew install openssl pkg-config
            # - name: Try to ensure the directory for diagnostic log collection exists
            #   run: |
            #       mkdir -p ~/Library/Logs/DiagnosticReports || true
            # - name: Fix pkgconfig link
            #   working-directory: /usr/local/lib/pkgconfig
            #   run: |
            #       pwd
            #       ls -la /usr/local/Cellar/
            #       ls -la /usr/local/Cellar/openssl@1.1
            #       OPEN_SSL_VERSION=`ls -la /usr/local/Cellar/openssl@1.1 | cat | tail -n1 | awk '{print $NF}'`
            #       ln -s /usr/local/Cellar/openssl@1.1/$OPEN_SSL_VERSION/lib/pkgconfig/* .
            # - name: Bootstrap
            #   timeout-minutes: 25
            #   run: scripts/build/gn_bootstrap.sh
            # - name: Uploading bootstrap logs
            #   uses: actions/upload-artifact@v2
            #   if: ${{ always() }} && ${{ !env.ACT }}
            #   with:
            #       name: bootstrap-logs
            #       path: |
            #           .environment/gn_out/.ninja_log
            #           .environment/pigweed-venv/*.log
            # - name: Setup and Build Simulated Device
            #   timeout-minutes: 20
            #   run: |
            #       BUILD_TYPE=simulated
            #       GN_ARGS='chip_tests_zap_config="app1" chip_project_config_include_dirs=["../../examples/placeholder/linux/apps/app1/include", "../../config/standalone"] chip_config_network_layer_ble=false'
            #       CHIP_ROOT_PATH=examples/placeholder/linux
            #       CHIP_ROOT_PATH="$CHIP_ROOT_PATH" BUILD_TYPE="$BUILD_TYPE" scripts/build/gn_gen.sh --args="$GN_ARGS"
            #       scripts/run_in_build_env.sh "ninja -C ./out/$BUILD_TYPE"
            # - name: Setup Build, Run Build and Run Tests
            #   timeout-minutes: 120
            #   run: |
            #       for BUILD_TYPE in default python_lib; do
            #           case $BUILD_TYPE in
            #               # We want to build various standalone example apps
            #               # (similar to what examples-linux-standalone.yaml
            #               # does), so use target_os="all" to get those picked
            #               # up as part of the "unified" build.  But then to
            #               # save CI resources we want to exclude a few
            #               # redundant things:
            #               #
            #               # * the mbedtls build, since we don't really plan to
            #               #   use that on Darwin.
            #               # * the "host clang" build, which uses the pigweed
            #               #   clang.
            #               "default") GN_ARGS='target_os="all" is_asan=true enable_host_clang_build=false enable_host_gcc_mbedtls_build=false';;
            #               "python_lib") GN_ARGS='enable_rtti=true enable_pylib=true';;
            #           esac
            #           BUILD_TYPE=$BUILD_TYPE scripts/build/gn_gen.sh --args="$GN_ARGS" --export-compile-commands
            #           scripts/run_in_build_env.sh "ninja -C ./out/$BUILD_TYPE"
            #           BUILD_TYPE=$BUILD_TYPE scripts/tests/gn_tests.sh
            #       done
            # - name: Clang-tidy validation
            #   timeout-minutes: 45
            #   run: |
            #       ./scripts/run_in_build_env.sh \
            #         "./scripts/run-clang-tidy-on-compile-commands.py \
            #            --no-log-timestamps \
            #            --compile-database out/default/compile_commands.json \
            #            check \
            #         "
            # - name: Uploading diagnostic logs
            #   uses: actions/upload-artifact@v2
            #   if: ${{ failure() }} && ${{ !env.ACT }}
            #   with:
            #       name: crash-log-darwin
            #       path: ~/Library/Logs/DiagnosticReports/
            # # - name: Perform CodeQL Analysis
            # #   if: ${{ github.event_name == 'push' && github.event.ref == 'refs/heads/master' }}
            # #   uses: github/codeql-action/analyze@v1
            # # TODO Log Upload https://github.com/project-chip/connectedhomeip/issues/2227
            # # TODO https://github.com/project-chip/connectedhomeip/issues/1512
            # # - name: Run Code Coverage
            # #   if: ${{ contains('main', env.BUILD_TYPE) }}
            # #   run: scripts/tools/codecoverage.sh
            # # - name: Upload Code Coverage
            # #   if: ${{ contains('main', env.BUILD_TYPE) }}
            # #   run: bash <(curl -s https://codecov.io/bash)
